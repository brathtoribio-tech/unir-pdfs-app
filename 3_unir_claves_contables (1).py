# -*- coding: utf-8 -*-
"""3. Unir claves contables.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11dSURp4fnldx4GxyHdS_fpzrGdNo6BlN
"""

!pip install pymupdf PyPDF2 pandas pytesseract pdf2image
!apt-get install -y poppler-utils tesseract-ocr tesseract-ocr-spa

from google.colab import files
import os, shutil

print("üîº Sube tus archivos PDF de CAR√ÅTULAS (ej. AC.10.037.2025.pdf)")
uploaded_caratulas = files.upload()

os.makedirs("caratulas_pdf", exist_ok=True)

for filename in uploaded_caratulas.keys():
    shutil.move(filename, os.path.join("caratulas_pdf", filename))

print("‚úÖ Archivos movidos a carpeta: caratulas_pdf/")

print("üîº Sube tus archivos PDF de SOLICITUDES (ej. 2025-0920-00.pdf)")
uploaded_solicitudes = files.upload()

os.makedirs("solicitudes_pdf", exist_ok=True)

for filename in uploaded_solicitudes.keys():
    shutil.move(filename, os.path.join("solicitudes_pdf", filename))

print("‚úÖ Archivos movidos a carpeta: solicitudes_pdf/")

import fitz
from PyPDF2 import PdfMerger
import re, pandas as pd
from collections import defaultdict
from pdf2image import convert_from_path
import pytesseract

# === RUTAS DE TRABAJO ===
carpetas = {
    "caratulas": "/content/caratulas_pdf",
    "solicitudes": "/content/solicitudes_pdf",
    "salida": "/content/CLAVES_GENERADAS"
}
os.makedirs(carpetas["salida"], exist_ok=True)

# --- Regex ---
re_act = re.compile(r"\b(?:AC|PI)\.\d{2}\.\d{3}\.\d{4}\b")  # ahora soporta AC y PI
re_sol = re.compile(r"\b(\d{4}-\d{4})-(\d{2})\b")

# === Funci√≥n h√≠brida: texto seleccionable y OCR si no hay texto ===
def lee_texto(pdf_path):
    texto = ""
    try:
        with fitz.open(pdf_path) as doc:
            texto = "\n".join(page.get_text() for page in doc)
    except:
        texto = ""
    if not texto.strip():  # si no hay texto, usar OCR
        try:
            images = convert_from_path(pdf_path, first_page=1, last_page=1)
            for img in images:
                texto += pytesseract.image_to_string(img, lang="spa")
        except Exception as e:
            print(f"[WARN] OCR fall√≥ en {pdf_path}: {e}")
    return texto.upper()  # üî† normalizar a MAY√öSCULAS

def extrae_actividad(texto):
    m = re_act.search(texto)
    return m.group(0) if m else None

def extrae_solicitud(texto):
    m = re_sol.search(texto)
    if m:
        base, vv = m.group(1), m.group(2)
        return base, vv
    return None, None

# --- Indexar solicitudes ---
archivos_solicitud = [f for f in os.listdir(carpetas["solicitudes"]) if f.lower().endswith(".pdf")]
idx_sol_por_codigo, idx_sol_por_base, idx_sol_por_actividad = {}, defaultdict(list), defaultdict(list)
texto_cache_sol = {}

for fn in archivos_solicitud:
    ruta = os.path.join(carpetas["solicitudes"], fn)
    txt = lee_texto(ruta)
    texto_cache_sol[fn] = txt

    base, vv = extrae_solicitud(txt)
    if base and vv:
        full = f"{base}-{vv}"
        idx_sol_por_codigo[full] = fn
        idx_sol_por_base[base].append((vv, fn))

    act = extrae_actividad(txt)
    if act:
        idx_sol_por_actividad[act].append(fn)

for base, lst in idx_sol_por_base.items():
    lst.sort(key=lambda x: int(x[0]), reverse=True)

# --- Procesar car√°tulas ---
archivos_caratula = [f for f in os.listdir(carpetas["caratulas"]) if f.lower().endswith(".pdf")]
emparejados, sin_solicitud, solicitudes_usadas, auditoria = [], [], set(), []

for fcar in archivos_caratula:
    ruta_caratula = os.path.join(carpetas["caratulas"], fcar)
    txt_caratula = lee_texto(ruta_caratula)

    cod_actividad = extrae_actividad(txt_caratula)
    if not cod_actividad:  # üö´ si no hay c√≥digo de actividad, reportar y no generar
        auditoria.append([fcar, None, "SIN-CODIGO", None, None, "Sin c√≥digo de actividad"])
        print(f"‚ö†Ô∏è No se detect√≥ c√≥digo de actividad en: {fcar}")
        continue

    base_sol, vv_sol_caratula = extrae_solicitud(txt_caratula)
    archivo_solicitud, version_final, motivo, cod_solicitud_full = None, None, None, None

    # === Match exacto ===
    if base_sol:
        if vv_sol_caratula:
            full_code = f"{base_sol}-{vv_sol_caratula}"
            if full_code in idx_sol_por_codigo:
                archivo_solicitud = idx_sol_por_codigo[full_code]
                version_final = vv_sol_caratula
                motivo, cod_solicitud_full = "Exacto", full_code
        if not archivo_solicitud and base_sol in idx_sol_por_base:
            vv, archivo_solicitud = idx_sol_por_base[base_sol][0]
            version_final, motivo = vv, "Por base (√∫ltima)"
            cod_solicitud_full = f"{base_sol}-{vv}"

    # === Fallback actividad ===
    if not archivo_solicitud and cod_actividad:
        candidatos = idx_sol_por_actividad.get(cod_actividad, [])
        if candidatos:
            archivo_solicitud = candidatos[0]
            base_tmp, vv_tmp = extrae_solicitud(texto_cache_sol[archivo_solicitud])
            version_final = vv_tmp or "00"
            motivo, cod_solicitud_full = "Por actividad", f"{base_tmp}-{version_final}" if base_tmp else None

    # === Fallback a√±o ===
    if not archivo_solicitud:
        my = re.search(r"\b(20\d{2})\b", txt_caratula) or re.search(r"\b(20\d{2})\b", fcar)
        if my:
            year = my.group(1)
            bases = [b for b in idx_sol_por_base if b.startswith(year)]
            if bases:
                vv, archivo_solicitud = idx_sol_por_base[bases[0]][0]
                version_final, motivo = vv, "Por a√±o"
                cod_solicitud_full = f"{bases[0]}-{vv}"

    if not archivo_solicitud:
        sin_solicitud.append(fcar)
        auditoria.append([fcar, None, cod_actividad, None, None, "Sin solicitud encontrada"])
        print(f"‚ùå No se encontr√≥ solicitud para: {fcar}")
        continue

    txt_sol = texto_cache_sol.get(archivo_solicitud, "")
    base_chk, vv_chk = extrae_solicitud(txt_sol)
    if vv_chk:
        version_final = vv_chk
        cod_solicitud_full = f"{base_chk}-{vv_chk}"

    nombre_salida = f"{cod_actividad} ({version_final}).pdf"
    ruta_salida = os.path.join(carpetas["salida"], nombre_salida)

    merger = PdfMerger()
    merger.append(ruta_caratula)
    merger.append(os.path.join(carpetas["solicitudes"], archivo_solicitud))
    merger.write(ruta_salida)
    merger.close()

    emparejados.append(nombre_salida)
    solicitudes_usadas.add(archivo_solicitud)
    print(f"‚úÖ Generado: {nombre_salida}")

    auditoria.append([fcar, archivo_solicitud, cod_actividad, cod_solicitud_full, version_final, motivo])

# --- Solicitudes sin car√°tula ---
sin_caratula = [f for f in archivos_solicitud if f not in solicitudes_usadas]
for fsol in sin_caratula:
    auditoria.append([None, fsol, None, None, None, "Solicitud sin car√°tula"])

# --- Guardar CSV ---
df = pd.DataFrame(auditoria, columns=["Car√°tula", "Solicitud usada", "C√≥digo actividad", "C√≥digo solicitud", "Versi√≥n", "Motivo"])
csv_path = "/content/CLAVES_AUDITORIA.csv"
df.to_csv(csv_path, index=False, encoding="utf-8-sig")
print(f"\nüìë Auditor√≠a guardada en: {csv_path}")

print("\nüìä REPORTE FINAL")
print(f"‚úîÔ∏è Combinados: {len(emparejados)}")
print(f"‚ùå Car√°tulas sin solicitud: {len(sin_solicitud)}")
print(f"‚ùå Solicitudes sin car√°tula: {len(sin_caratula)}")

import shutil
from google.colab import files

# Crear ZIP
shutil.make_archive("/content/CLAVES_ZIP", 'zip', "/content/CLAVES_GENERADAS")

# Descargar ZIP y CSV
files.download("/content/CLAVES_ZIP.zip")
files.download("/content/CLAVES_AUDITORIA.csv")